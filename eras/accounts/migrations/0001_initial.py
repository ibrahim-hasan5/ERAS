# Generated by Django 5.2 on 2025-09-11 16:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('citizen', 'Citizen'), ('service_provider', 'Service Provider')], default='citizen', max_length=20)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CitizenProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('blood_group', models.CharField(blank=True, choices=[('', 'Select Blood Group'), ('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5)),
                ('emergency_contact', models.CharField(blank=True, max_length=15)),
                ('present_division', models.CharField(blank=True, choices=[('', 'Select Division'), ('dhaka', 'Dhaka'), ('chattogram', 'Chattogram'), ('khulna', 'Khulna'), ('rajshahi', 'Rajshahi'), ('barishal', 'Barishal'), ('sylhet', 'Sylhet'), ('rangpur', 'Rangpur'), ('mymensingh', 'Mymensingh')], max_length=50)),
                ('present_district', models.CharField(blank=True, max_length=100)),
                ('present_upazila', models.CharField(blank=True, max_length=100)),
                ('present_post_office', models.CharField(blank=True, max_length=100)),
                ('present_post_code', models.CharField(blank=True, max_length=10)),
                ('present_address_details', models.TextField(blank=True)),
                ('permanent_division', models.CharField(blank=True, choices=[('', 'Select Division'), ('dhaka', 'Dhaka'), ('chattogram', 'Chattogram'), ('khulna', 'Khulna'), ('rajshahi', 'Rajshahi'), ('barishal', 'Barishal'), ('sylhet', 'Sylhet'), ('rangpur', 'Rangpur'), ('mymensingh', 'Mymensingh')], max_length=50)),
                ('permanent_district', models.CharField(blank=True, max_length=100)),
                ('permanent_upazila', models.CharField(blank=True, max_length=100)),
                ('permanent_post_office', models.CharField(blank=True, max_length=100)),
                ('permanent_post_code', models.CharField(blank=True, max_length=10)),
                ('permanent_address_details', models.TextField(blank=True)),
                ('frequent_division', models.CharField(blank=True, choices=[('', 'Select Division'), ('dhaka', 'Dhaka'), ('chattogram', 'Chattogram'), ('khulna', 'Khulna'), ('rajshahi', 'Rajshahi'), ('barishal', 'Barishal'), ('sylhet', 'Sylhet'), ('rangpur', 'Rangpur'), ('mymensingh', 'Mymensingh')], max_length=50)),
                ('frequent_district', models.CharField(blank=True, max_length=100)),
                ('frequent_upazila', models.CharField(blank=True, max_length=100)),
                ('frequent_post_office', models.CharField(blank=True, max_length=100)),
                ('frequent_post_code', models.CharField(blank=True, max_length=10)),
                ('frequent_address_details', models.TextField(blank=True)),
                ('medical_conditions', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('regular_medications', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='citizen_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
